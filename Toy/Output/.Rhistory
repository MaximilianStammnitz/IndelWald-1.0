## Platypus
# Empty Chromosome String
empty <- c(1, full.chr.length)
plot(rep(1,2)~empty, type="l", lwd=7, ylab="Call:Coverage", xlab="Position [Bp]", cex.lab=1.3,
main=paste0("Platypus-called BAF - ", sample, " - on Chr. ", chromosome), cex.main=1.8, ylim=c(0,1),
col="white", yaxt="n")
axis(2, at=c(0, 1/3, 0.5, 2/3, 1), labels=c("0", "1/3", "1/2", "2/3", "1"), cex.axis=0.8)
# All Insertions
ins.pos <- as.integer(hits.platypus[which(hits.platypus[,"Type"]=="I"),"Chromosome Position"])
ins.height <- as.numeric(hits.platypus[which(hits.platypus[,"Type"]=="I"),"Platypus_Calls"])
points(x=ins.pos, y=ins.height, cex=0.8, pch=16, col=rgb(1,0,0,0.5))
# All Deletions
dels.pos <- as.integer(hits.platypus[which(hits.platypus[,"Type"]=="D"),"Chromosome Position"])
dels.height <- as.numeric(hits.platypus[which(hits.platypus[,"Type"]=="D"),"Platypus_Calls"])
alpha.adjust <- length(ins.height)/length(dels.height)
points(x=dels.pos, y=dels.height, cex=0.8, pch=16, col=rgb(0,0,1,0.5))
# Legend
legend("bottomleft", legend=c("Insertions", "Deletions"), col=c(rgb(1,0,0,0.8), rgb(0,0,1,0.8)),
pch=16, cex=1.5, pt.cex=2, bty="o", bg="white")
dev.off()
}else if(pindel == "Y"){
pdf(paste0("BAF_", sample, "_chr", chromosome, ".pdf"), width=18,height=14)
par(mfrow=c(2,1))
mar.default <- c(5,4,4,2) + 0.1
par(mar = mar.default + c(0, 5, 0, 0))
## Platypus
# Empty Chromosome String
empty <- c(1, full.chr.length)
plot(rep(1,2)~empty, type="l", lwd=7, ylab="Call:Coverage", xlab="Position [Bp]", cex.lab=1.3,
main=paste0("Platypus-called BAF - ", sample, " - on Chr. ", chromosome), cex.main=1.8, ylim=c(0,1),
col="white", yaxt="n")
axis(2, at=c(0, 1/3, 0.5, 2/3, 1), labels=c("0", "1/3", "1/2", "2/3", "1"), cex.axis=0.8)
# All Insertions
ins.pos <- as.integer(hits.platypus[which(hits.platypus[,"Type"]=="I"),"Chromosome Position"])
ins.height <- as.numeric(hits.platypus[which(hits.platypus[,"Type"]=="I"),"Platypus_Calls"])
points(x=ins.pos, y=ins.height, cex=0.8, pch=16, col=rgb(1,0,0,0.5))
# All Deletions
dels.pos <- as.integer(hits.platypus[which(hits.platypus[,"Type"]=="D"),"Chromosome Position"])
dels.height <- as.numeric(hits.platypus[which(hits.platypus[,"Type"]=="D"),"Platypus_Calls"])
alpha.adjust <- length(ins.height)/length(dels.height)
points(x=dels.pos, y=dels.height, cex=0.8, pch=16, col=rgb(0,0,1,0.5))
# Legend
legend("bottomleft", legend=c("Insertions", "Deletions"), col=c(rgb(1,0,0,0.8), rgb(0,0,1,0.8)),
pch=16, cex=1.5, pt.cex=2, bty="o", bg="white")
## Pindel
# Empty Chromosome String
empty <- c(1, full.chr.length)
plot(rep(1,2)~empty, type="l", lwd=7, ylab="Call:Coverage", xlab="Position [Bp]", cex.lab=1.3,
main=paste0("Pindel-called BAF - ", sample, " - on Chr. ", chromosome), cex.main=1.8, ylim=c(0,1), yaxt="n",
col="white", yaxt="n")
axis(2, at=c(0, 1/3, 0.5, 2/3, 1), labels=c("0", "1/3", "1/2", "2/3", "1"), cex.axis=0.8)
# All Insertions
ins.pos <- as.integer(hits.pindel[which(hits.pindel[,"Type"]=="I"),"Chromosome Position"])
ins.height <- as.numeric(hits.pindel[which(hits.pindel[,"Type"]=="I"),"Pindel_Calls"])
points(x=ins.pos, y=ins.height, cex=0.8, pch=16, col=rgb(1,0,0,0.5))
# All Deletions
dels.pos <- as.integer(hits.pindel[which(hits.pindel[,"Type"]=="D"),"Chromosome Position"])
dels.height <- as.numeric(hits.pindel[which(hits.pindel[,"Type"]=="D"),"Pindel_Calls"])
alpha.adjust <- length(ins.height)/length(dels.height)
points(x=dels.pos, y=dels.height, cex=0.8, pch=16, col=rgb(0,0,1,0.5))
# Legend
legend("bottomleft", legend=c("Insertions", "Deletions"), col=c(rgb(1,0,0,0.8), rgb(0,0,1,0.8)),
pch=16, cex=1.5, pt.cex=2, bty="o", bg="white")
dev.off()
}
}
indel.baf(hits = tumour.1$'summary',
contigs.coordinates = contig.lengths,
chromosome = "5",
sample = "Tumour_#1",
pindel = "N")
indel.baf(hits = tumour.1$'summary',
contigs.coordinates = contig.lengths,
chromosome = "5",
sample = "Tumour_#1",
pindel = "Y")
tumour.1 <- vector(mode="list", length=5)
names(tumour.1) <- c("overlap", "pindel-Q",
"platypus-Q", "summary", "in-transcript")
## Take Platypus/Pindel-Intersection
tumour.1[[1]] <- overlap.vcfs(pindel.vcf = pindel.tumours[[1]],
platypus.vcf = platypus.tumours[[1]])
# Apply a Pindel-Quality Filter (default Threshold: 200)
tumour.1[[2]] <- pindel.filter(overlap = tumour.1$'overlap',
threshold = 200)
# Apply a Platypus-Quality Filter
tumour.1[[3]] <- platypus.filter(overlap = tumour.1$'pindel-Q',
threshold = 200)
# Summarise: Match Contig-Positions to Chromosomal Positions
tumour.1[[4]] <- indel.summary(contigs.coordinates = contig.lengths,
pindel.vcf = tumour.1$'platypus-Q'[[1]],
platypus.vcf = tumour.1$'platypus-Q'[[2]])
devil.transcripts <- read.table("Devil_Transcript_7.1.txt", header=T, sep=";")
main.path <- getwd()
getwd()
setwd("/Users/ms37/Desktop/Thesis/Indelwald-1.0/Toy/")
setwd("/Users/ms37/Desktop/Thesis/Indelwald-1.0/")
setwd(paste0(main.path,"/Helpers"))
getwd*()
getwd()
main.path
main.path <- getwd()
setwd(paste0(main.path,"/Helpers"))
devil.transcripts <- read.table("Devil_Transcript_7.1.txt", header=T, sep=";")
setwd(main.path)
devil.transcripts.chr <- devil.transcripts[grep(paste0("Chr", chromosome), devil.transcripts[,1]),]
names <- colnames(hits)
hits <- cbind(hits, rep(NA, length(hits[,1])), rep(NA, length(hits[,1])), rep(NA, length(hits[,1])),
rep(NA, length(hits[,1])), rep(NA, length(hits[,1])), rep(NA, length(hits[,1])))
colnames(hits) <- c(names, "Coding Type", "RNA Type", "Exon/Intron Number", "Strand", "Gene ID", "Transcript ID")
View(hits)
library(GenomicRanges)
Hit.Ranges <- GRanges(seqnames = Rle(rep(paste0("chr", chromosome), length(hits[,1]))),
ranges = IRanges(start = as.integer(hits[,"Chromosome Position"]),
end = as.integer(hits[,"Chromosome Position"])))
Target.Ranges <- GRanges(seqnames = Rle(rep(paste0("chr", chromosome), length(devil.transcripts.chr[,1]))),
ranges = IRanges(start = devil.transcripts.chr[,"Start"],
end = devil.transcripts.chr[,"End"]))
Overlaps <- findOverlaps(Hit.Ranges, Target.Ranges)
Overlaps <- as.matrix(Overlaps)
colnames(Overlaps) <- c("Hitsample", "Targetlocation")
devil.transcripts.chr <- as.matrix(devil.transcripts.chr)
if(length(as.integer(Overlaps[,1]))>0){
for (i in 1:length(as.integer(Overlaps[,1]))){
hits[as.integer(Overlaps[i,"Hitsample"]),"Coding Type"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Coding.Type")]
hits[as.integer(Overlaps[i,"Hitsample"]),"RNA Type"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("RNA.Type")]
hits[as.integer(Overlaps[i,"Hitsample"]),"Exon/Intron Number"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Exon.Intron.Number")]
hits[as.integer(Overlaps[i,"Hitsample"]),"Strand"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Strand")]
hits[as.integer(Overlaps[i,"Hitsample"]),"Gene ID"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Gene.ID")]
hits[as.integer(Overlaps[i,"Hitsample"]),"Transcript ID"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Transcript.ID")]
}
}
View(hits)
hits <- hits[-which(is.na(hits[,"Coding Type"])==T),,drop=F]
View(hits)
# 12. Gene for Indel Presence in Genes
transcript.hits <- function(hits, chromosome){
# a. Check only against genes from particular Chromosome
devil.transcripts.chr <- devil.transcripts[grep(paste0("Chr", chromosome), devil.transcripts[,1]),]
# b. Take the hit-list Position
names <- colnames(hits)
hits <- cbind(hits, rep(NA, length(hits[,1])), rep(NA, length(hits[,1])), rep(NA, length(hits[,1])),
rep(NA, length(hits[,1])), rep(NA, length(hits[,1])), rep(NA, length(hits[,1])))
colnames(hits) <- c(names, "Coding Type", "RNA Type", "Exon/Intron Number",
"Strand", "Gene ID", "Transcript ID")
# c. Define the Ranges
Hit.Ranges <- GRanges(seqnames = Rle(rep(paste0("chr", chromosome), length(hits[,1]))),
ranges = IRanges(start = as.integer(hits[,"Chromosome Position"]),
end = as.integer(hits[,"Chromosome Position"])))
Target.Ranges <- GRanges(seqnames = Rle(rep(paste0("chr", chromosome), length(devil.transcripts.chr[,1]))),
ranges = IRanges(start = devil.transcripts.chr[,"Start"],
end = devil.transcripts.chr[,"End"]))
# d. Find Overlaps
Overlaps <- findOverlaps(Hit.Ranges, Target.Ranges)
Overlaps <- as.matrix(Overlaps)
colnames(Overlaps) <- c("Hitsample", "Targetlocation")
devil.transcripts.chr <- as.matrix(devil.transcripts.chr)
# e. Extract the corresponding Values
if(length(as.integer(Overlaps[,1]))>0){
for (i in 1:length(as.integer(Overlaps[,1]))){
hits[as.integer(Overlaps[i,"Hitsample"]),"Coding Type"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Coding.Type")]
hits[as.integer(Overlaps[i,"Hitsample"]),"RNA Type"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("RNA.Type")]
hits[as.integer(Overlaps[i,"Hitsample"]),"Exon/Intron Number"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Exon.Intron.Number")]
hits[as.integer(Overlaps[i,"Hitsample"]),"Strand"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Strand")]
hits[as.integer(Overlaps[i,"Hitsample"]),"Gene ID"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Gene.ID")]
hits[as.integer(Overlaps[i,"Hitsample"]),"Transcript ID"] <- devil.transcripts.chr[as.integer(Overlaps[i,"Targetlocation"]),c("Transcript.ID")]
}
}
# f. Shortening the table to variants that were really called in Transcripts
hits <- hits[-which(is.na(hits[,"Coding Type"])==T),,drop=F]
# g. Output
return(hits)
}
tumour.1[[5]] <- transcript.hits(hits = tumour.1$'summary',
chromosome = "5")
View(tumour.1[[5]])
names(tumour.1)
hits = tumour.1$'in-transcript'
main.path
setwd(paste0(main.path,"/Helpers"))
devil.genes.trans <- read.table("Devil_Genes_7.1_ENSEMBL_translated.txt", header=T, sep=";")
devil.transcripts.trans <- read.table("Devil_Transcript_7.1_ENSEMBL_translated.txt", header=T, sep=";")
setwd(main.path)
names <- colnames(hits)
names
hits.translated <- cbind(hits, rep(NA, length(hits[,1])), rep(NA, length(hits[,1])))
colnames(hits.translated) <- c(names, "Gene Translation", "Transcript Translation")
rownames(devil.genes.translation) <- devil.genes.translation[,1]
rownames(devil.transcripts.translation) <- devil.transcripts.translation[,1]
hits = tumour.1$'in-transcript'
names <- colnames(hits)
hits.translated <- cbind(hits, rep(NA, length(hits[,1])), rep(NA, length(hits[,1])))
colnames(hits.translated) <- c(names, "Gene Translation", "Transcript Translation")
rownames(devil.genes.trans) <- devil.genes.trans[,1]
rownames(devil.transcripts.trans) <- devil.transcripts.trans[,1]
names
gene.matches <- match(hits[,"Gene ID"],devil.genes.translation[,"ID"])
gene.matches <- match(hits[,"Gene ID"],devil.genes.trans[,"ID"])
gene.matches
hits.translated[,"Gene Translation"] <- as.character(devil.genes.trans[gene.matches,"External.Name"])
transcript.matches <- match(hits[,"Transcript ID"],devil.transcripts.trans[,"ID"])
hits.translated[,"Transcript Translation"] <- as.character(devil.transcripts.trans[transcript.matches,"External.Name"])
hits.translated[,1] <- paste(hits.translated[,1], hits.translated[,2], sep=":")
View(hits.translated)
hits.translate <- function(hits,
contig.length){
# a. Add Colums to hits
names <- colnames(hits)
hits.translated <- cbind(hits, rep(NA, length(hits[,1])), rep(NA, length(hits[,1])))
colnames(hits.translated) <- c(names, "Gene Translation", "Transcript Translation")
rownames(devil.genes.trans) <- devil.genes.trans[,1]
rownames(devil.transcripts.trans) <- devil.transcripts.trans[,1]
# b. Add External Gene and Transcriptname, also in case of NA
gene.matches <- match(hits[,"Gene ID"],devil.genes.trans[,"ID"])
hits.translated[,"Gene Translation"] <- as.character(devil.genes.trans[gene.matches,"External.Name"])
transcript.matches <- match(hits[,"Transcript ID"],devil.transcripts.trans[,"ID"])
hits.translated[,"Transcript Translation"] <- as.character(devil.transcripts.trans[transcript.matches,"External.Name"])
# c. Merge first and second column, to represent IGV/JBROWSE address
hits.translated[,1] <- paste(hits.translated[,1], hits.translated[,2], sep=":")
# d. Output
return(hits.translated)
}
hits.translate(hits = tumour.1$'in-transcript',
devil.genes.trans,
devil.transcripts.trans,
contigs.coordinates = contig.lengths))
hits.translate(hits = tumour.1$'in-transcript',
devil.genes.trans,
devil.transcripts.trans,
contigs.coordinates = contig.lengths)
# Translate Transcripts/Genes to HGNC
hits.translate(hits = tumour.1$'in-transcript',
contigs.coordinates = contig.lengths)
# 14. Translate particular Gene Hits with the Reference
hits.translate <- function(hits){
# a. Add Colums to hits
names <- colnames(hits)
hits.translated <- cbind(hits, rep(NA, length(hits[,1])), rep(NA, length(hits[,1])))
colnames(hits.translated) <- c(names, "Gene Translation", "Transcript Translation")
rownames(devil.genes.trans) <- devil.genes.trans[,1]
rownames(devil.transcripts.trans) <- devil.transcripts.trans[,1]
# b. Add External Gene and Transcriptname, also in case of NA
gene.matches <- match(hits[,"Gene ID"],devil.genes.trans[,"ID"])
hits.translated[,"Gene Translation"] <- as.character(devil.genes.trans[gene.matches,"External.Name"])
transcript.matches <- match(hits[,"Transcript ID"],devil.transcripts.trans[,"ID"])
hits.translated[,"Transcript Translation"] <- as.character(devil.transcripts.trans[transcript.matches,"External.Name"])
# c. Merge first and second column, to represent IGV/JBROWSE address
hits.translated[,1] <- paste(hits.translated[,1], hits.translated[,2], sep=":")
# d. Output
return(hits.translated)
}
hits.translate(hits = tumour.1$'in-transcript')
tumour.1[[5]] <- hits.translate(hits = tumour.1$'in-transcript')
View(tumour.1$'summary')
View(tumour.1$'in-transcript')
cat(unique(tumour.1$'in-transcript'[,"Gene Translation"]))
print(unique(tumour.1$'in-transcript'[,"Gene Translation"]))
print(unique(tumour.1$'in-transcript'[,"Transcript Translation"]))
print(unique(tumour.1$'in-transcript'[,"Gene Translation"]))
print(unique(tumour.1$'in-transcript'[,"Gene Translation"]))
print(tumour.1$'in-transcript'[,"Gene Translation"])
print(unique(tumour.1$'in-transcript'[,"Gene Translation"]))
print(!is.na(unique(tumour.1$'in-transcript'[,"Gene Translation"])))
print(sort(unique(tumour.1$'in-transcript'[,"Gene Translation"])))
cat(sort(unique(tumour.1$'in-transcript'[,"Gene Translation"])))
paste(sort(unique(tumour.1$'in-transcript'[,"Gene Translation"])))
results <- matrix(0, nrow = 1, ncol = 7)
colnames(results) <- c("Total Unique", "Raw Pindel", "Raw Platypus", "Overlap",
"Pindel-Quality Filtered", "Platypus-Quality Filtered", "Transcripts")
length(union(pindel.tumours[[1]][,1],platypus.tumours[[1]][,1]))
pindel.tumours[[1]][,1]
platypus.tumours[[1]][,1]
results[c,1] <- length(pindel.tumours[[1]][,1])+length(platypus.tumours[[1]][,1])-length(tumour.1[[1]][,1])
ength(pindel.tumours[[1]][,1])
length(pindel.tumours[[1]][,1])
length(platypus.tumours[[1]][,1])
length(tumour.1[[1]][,1])
length(pindel.tumours[[1]][,1])+
length(platypus.tumours[[1]][,1])-length(tumour.1$"overlap"[[1]][,1])
results <- matrix(0, nrow = 1, ncol = 7)
colnames(results) <- c("Total Unique", "Raw Pindel", "Raw Platypus", "Overlap",
"Pindel-Q", "Platypus-Qu", "Transcripts")
pindel.vcf[,1] <- paste(pindel.vcf[,1], pindel.vcf[,2], sep="_")
platypus.vcf[,1] <- paste(platypus.vcf[,1], platypus.vcf[,2], sep="_")
raw.union <- length(union(pindel.vcf[,1], platypus.vcf[,1]))
raw.union
pindel.vcf
length(pindel.vcf[,1])
length(platypus.vcf[,1])
pindel.vcf = pindel.tumours[[1]]
platypus.vcf = platypus.tumours[[1]]
summary.list = tumour.1
pindel.vcf[,1] <- paste(pindel.vcf[,1], pindel.vcf[,2], sep="_")
platypus.vcf[,1] <- paste(platypus.vcf[,1], platypus.vcf[,2], sep="_")
length(pindel.vcf[,1])
length(platypus.vcf[,1])
raw.union <- length(union(pindel.vcf[,1], platypus.vcf[,1]))
raw.union
union(pindel.vcf[,1], platypus.vcf[,1])
results[c,2] <- length(pindel.vcf[,1])
results[c,3] <- length(platypus.vcf[,1])
length(pindel.vcf[,1])
length(platypus.vcf[,1])
results[1] <- length(union(pindel.vcf[,1], platypus.vcf[,1]))
results[2] <- length(pindel.vcf[,1])
results[3] <- length(platypus.vcf[,1])
length(intersect(pindel.vcf[,1], platypus.vcf[,1]))
results[4] <- length(intersect(pindel.vcf[,1], platypus.vcf[,1]))
summary.list = tumour.1
length(summary.list$'overlap'[,1])
length(summary.list$'overlap'[[1]][,1])
results[5] <- length(summary.list$'pindel-q'[[1]][,1])
results[5]
length(summary.list$'pindel-q'[[1]][,1])
length(summary.list$'pindel-Q'[[1]][,1])
results[6] <- length(summary.list$'platypus-Q'[[1]][,1])
results[6]
length(summary.list$'in-transcript'[,1])
results[7] <- length(summary.list$'in-transcript'[,1])
results
results <- matrix(0, nrow = 1, ncol = 7)
colnames(results) <- c("Raw", "Pindel", "Platypus", "Overlap",
"Pindel-Q", "Platypus-Qu", "Transcripts")
results[1] <- length(union(pindel.vcf[,1], platypus.vcf[,1]))
results[2] <- length(pindel.vcf[,1])
results[3] <- length(platypus.vcf[,1])
results[4] <- length(summary.list$'overlap'[[1]][,1])
results[5] <- length(summary.list$'pindel-Q'[[1]][,1])
results[6] <- length(summary.list$'platypus-Q'[[1]][,1])
results[7] <- length(summary.list$'in-transcript'[,1])
results
sample
chromosome
barplot(full, beside = T, col = c(rgb(1,0,0,0.5), rgb(1,0,0,1), rgb(1,0,0,0.5), rgb(1,0,0,1),
rgb(0,0,1,0.5), rgb(0,0,1,1), rgb(0,0,1,1), rgb(0,0,1,1),
rgb(0,0,1,0.5)), main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=0.8)
stats.plot <- barplot(results, beside = T,
col = c(rgb(1,0,0,0.5), rgb(1,0,0,1), rgb(1,0,0,0.5), rgb(1,0,0,1),
rgb(0,0,1,0.5), rgb(0,0,1,1), rgb(0,0,1,1), rgb(0,0,1,1),
rgb(0,0,1,0.5)),
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=0.8)
ts.plot <- barplot(results, beside = T,
col = "red",
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=0.8)
text(x=stats.plot, y=results+30000, labels=as.character(results), xpd=TRUE, cex=0.5, srt=90)
# b. Draw the Bar-Plots
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = "red",
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=0.8)
# Add Values
text(x=stats.plot, y=results+30000, labels=as.character(results), xpd=TRUE, cex=0.5, srt=90)
dev.off()
getwd()
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = "red",
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=0.8)
# Add Values
text(x=stats.plot, y=results+3000, labels=as.character(results), xpd=TRUE, cex=0.5, srt=90)
dev.off()
# b. Draw the Bar-Plots
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = "red",
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=1.2)
# Add Values
text(x=stats.plot, y=results+3000, labels=as.character(results), xpd=TRUE, cex=1, srt=90)
dev.off()
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = "red",
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=1.5)
# Add Values
text(x=stats.plot, y=results+3000, labels=as.character(results), xpd=TRUE, cex=1, srt=90)
dev.off()
# b. Draw the Bar-Plots
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = "red",
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=1.5)
# Add Values
text(x=stats.plot, y=results+3000, labels=as.character(results), xpd=TRUE, cex=1.2, srt=90)
dev.off()
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = c(rgb(1,0,0,1), rgb(1,0,0,0.9), rgb(1,0,0,0.8),
rgb(1,0,0,0.7), rgb(1,0,0,0.6), rgb(1,0,0,0.5),
rgb(1,0,0,0.4)
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=1.5)
# Add Values
text(x=stats.plot, y=results+3000, labels=as.character(results), xpd=TRUE, cex=1.2, srt=90)
dev.off()
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = c(rgb(1,0,0,1), rgb(1,0,0,0.9), rgb(1,0,0,0.8),
rgb(1,0,0,0.7), rgb(1,0,0,0.6), rgb(1,0,0,0.5),
rgb(1,0,0,0.4)),
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=1.5)
# Add Values
text(x=stats.plot, y=results+3000, labels=as.character(results), xpd=TRUE, cex=1.2, srt=90)
dev.off()
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = c(rgb(1,0,0,1), rgb(1,0,0,0.85), rgb(1,0,0,0.7),
rgb(1,0,0,0.55), rgb(1,0,0,0.4), rgb(1,0,0,0.25),
rgb(1,0,0,0.1)),
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=1.5)
# Add Values
text(x=stats.plot, y=results+3000, labels=as.character(results), xpd=TRUE, cex=1.2, srt=90)
dev.off()
# 15. Final Results Statistics
final.results.plots <- function(pindel.vcf,
platypus.vcf,
summary.list,
sample,
chromosome){
# Output folder
setwd(paste0(main.path,"/Toy/Output"))
# a. Retrieve Raw Numbers
results <- matrix(0, nrow = 1, ncol = 7)
colnames(results) <- c("Raw", "Pindel", "Platypus", "Overlap",
"Pindel-Q", "Platypus-Q", "Transcripts")
pindel.vcf[,1] <- paste(pindel.vcf[,1], pindel.vcf[,2], sep="_")
platypus.vcf[,1] <- paste(platypus.vcf[,1], platypus.vcf[,2], sep="_")
results[1] <- length(union(pindel.vcf[,1], platypus.vcf[,1]))
results[2] <- length(pindel.vcf[,1])
results[3] <- length(platypus.vcf[,1])
results[4] <- length(summary.list$'overlap'[[1]][,1])
results[5] <- length(summary.list$'pindel-Q'[[1]][,1])
results[6] <- length(summary.list$'platypus-Q'[[1]][,1])
results[7] <- length(summary.list$'in-transcript'[,1])
# b. Draw the Bar-Plots
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = c(rgb(1,0,0,1), rgb(1,0,0,0.85), rgb(1,0,0,0.7),
rgb(1,0,0,0.55), rgb(1,0,0,0.4), rgb(1,0,0,0.25),
rgb(1,0,0,0.1)),
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.3, cex.main=2,
cex.names=1.5)
# Add Values
text(x=stats.plot, y=results+3000, labels=as.character(results), xpd=TRUE, cex=1.2, srt=90)
dev.off()
}
final.results.plots(pindel.vcf = pindel.tumours[[1]],
platypus.vcf = platypus.tumours[[1]],
summary.list = tumour.1,
chromosome = "5",
sample = "Tumour_#1")
# 15. Final Results Statistics
final.results.plots <- function(pindel.vcf,
platypus.vcf,
summary.list,
sample,
chromosome){
# Output folder
setwd(paste0(main.path,"/Toy/Output"))
# a. Retrieve Raw Numbers
results <- matrix(0, nrow = 1, ncol = 7)
colnames(results) <- c("Raw", "Pindel", "Platypus", "Overlap",
"Pindel-Q", "Platypus-Q", "Transcripts")
pindel.vcf[,1] <- paste(pindel.vcf[,1], pindel.vcf[,2], sep="_")
platypus.vcf[,1] <- paste(platypus.vcf[,1], platypus.vcf[,2], sep="_")
results[1] <- length(union(pindel.vcf[,1], platypus.vcf[,1]))
results[2] <- length(pindel.vcf[,1])
results[3] <- length(platypus.vcf[,1])
results[4] <- length(summary.list$'overlap'[[1]][,1])
results[5] <- length(summary.list$'pindel-Q'[[1]][,1])
results[6] <- length(summary.list$'platypus-Q'[[1]][,1])
results[7] <- length(summary.list$'in-transcript'[,1])
# b. Draw the Bar-Plots
pdf(paste0("Stats_Plots_", sample, "_", chromosome, ".pdf"), width=15, height=12)
stats.plot <- barplot(results, beside = T,
col = c(rgb(1,0,0,1), rgb(1,0,0,0.85), rgb(1,0,0,0.7),
rgb(1,0,0,0.55), rgb(1,0,0,0.4), rgb(1,0,0,0.25),
rgb(1,0,0,0.1)),
main=paste0("Filtering Results: ", sample, " - Chromosome ", chromosome),
xlab=NA, ylab="Number of Calls", cex.lab=1.5, cex.main=2,
cex.names=1.5)
# Add Values
text(x=stats.plot, y=results+3000, labels=as.character(results), xpd=TRUE, cex=1.2, srt=90)
dev.off()
}
final.results.plots(pindel.vcf = pindel.tumours[[1]],
platypus.vcf = platypus.tumours[[1]],
summary.list = tumour.1,
chromosome = "5",
sample = "Tumour_#1")
rm(list=ls())
