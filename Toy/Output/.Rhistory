rep(chromosome[5], length(chr.in.hits[[5]])),
rep(chromosome[6], length(chr.in.hits[[6]])),
rep(chromosome[7], length(chr.in.hits[[7]])),
rep(chromosome[8], length(chr.in.hits[[8]])))),
ranges = IRanges(start = as.integer(hits[[i]][,"Chromosome Position"]),
end = as.integer(hits[[i]][,"Chromosome Position"])))
Target.Ranges <- GRanges(seqnames = Rle(c(rep(chromosome[1], length(chr.in.transcripts[[1]])),
rep(chromosome[2], length(chr.in.transcripts[[2]])),
rep(chromosome[3], length(chr.in.transcripts[[3]])),
rep(chromosome[4], length(chr.in.transcripts[[4]])),
rep(chromosome[5], length(chr.in.transcripts[[5]])),
rep(chromosome[6], length(chr.in.transcripts[[6]])),
rep(chromosome[7], length(chr.in.transcripts[[7]])),
rep(chromosome[8], length(chr.in.transcripts[[8]])))),
ranges = IRanges(start = devil.transcripts[,"Start"],
end = devil.transcripts[,"End"]))
# e. Find Overlaps
cat(paste0("\n Find Overlaps: ", names(hits)[i], "."))
Overlaps <- findOverlaps(Hit.Ranges, Target.Ranges)
Overlaps <- as.matrix(Overlaps)
colnames(Overlaps) <- c("Hitsample", "Targetlocation")
# f. Extract the corresponding Values
cat(paste0("\n Extract the corresponding Values: ", names(hits)[i], "."))
if(length(as.integer(Overlaps[,1]))>0){
want.extract <- c("Coding Type", "RNA Type", "Exon/Intron Number", "Strand", "Gene ID", "Transcript ID")
will.extract <- c("Coding.Type", "RNA.Type", "Exon.Intron.Number", "Strand", "Gene.ID", "Transcript.ID")
devil.transcripts.tmp <- as.matrix(devil.transcripts)
hits[[i]][Overlaps[,1],want.extract] <- devil.transcripts.tmp[Overlaps[,2],will.extract]
}
# g. Shortening the table to variants that were really called
cat(paste0("\n Shortening the table: ", names(hits)[i], "."))
hits[[i]] <- hits[[i]][-which(is.na(hits[[i]][,"Coding Type"])==T),,drop=F]
# h. Translating Gene Names to HGNC
cat(paste0("\n Translating Gene Names to HGNC: ", names(hits)[i], "."))
names <- colnames(hits[[i]])
hits[[i]] <- cbind(hits[[i]], rep(NA, length(hits[[i]][,1])), rep(NA, length(hits[[i]][,1])))
colnames(hits[[i]]) <- c(names, "Gene Translation", "Transcript Translation")
rownames(devil.genes.trans) <- devil.genes.trans[,1]
rownames(devil.transcripts.trans) <- devil.transcripts.trans[,1]
gene.matches <- match(hits[[i]][,"Gene ID"],devil.genes.trans[,"ID"])
hits[[i]][,"Gene Translation"] <- as.character(devil.genes.trans[gene.matches,"External.Name"])
transcript.matches <- match(hits[[i]][,"Transcript ID"],devil.transcripts.trans[,"ID"])
hits[[i]][,"Transcript Translation"] <- as.character(devil.transcripts.trans[transcript.matches,"External.Name"])
cat("\n Done. \n")
}
# h. Output
return(hits)
}
# 4. Build a Sophisticated Venn for DFT2, based on Cross-References
cross.DFTD.venn <- function(hits = cross.transcripts,
threshold = 4,
type,
contig.lengths = contig.size,
titulo){
# Output folder
setwd(paste0(main.path,"/Toy/Output"))
# a. Extract the Exons ##
hits <- lapply(hits, function(x) x[which(x[,"RNA Type"]=="exon"),])
hits <- lapply(hits, function(x) {x[,1] <- paste(x[,1], x[,2], x[,3], x[,4], x[,16], sep=";")
return(x)})
# b. Build-up a binary copy of the Mastertable
all.positions <- sapply(hits, function(x) as.character(x[,1]))
all.positions <- Reduce(union, list(all.positions[[1]],
all.positions[[2]],
all.positions[[3]],
all.positions[[4]],
all.positions[[5]],
all.positions[[6]]))
all.positions <- sort(all.positions)
bin.venn <- matrix(0, ncol = 3+length(names(hits)), nrow = length(all.positions))
colnames(bin.venn) <- c("Contig", names(hits),
"Gene ID", "Gene Translation")
bin.venn[,1] <- all.positions
# c. Extract strict calls
sets <- names(hits)
for (i in 1:length(sets)){
hit.set <- which(names(hits)==sets[i])
assign(paste0("n.", sets[i]), match(hits[[hit.set]][,"Contig"],bin.venn[,"Contig"]))
tmp <- paste0("n.", sets[i])
bin.venn[get(tmp),sets[i]] <- hits[[hit.set]][,sets[i]]
}
bin.stringent.only <- bin.venn
# d. Add non-stringent calls, in case the corresponding bin value is still 0
for (i in 1:length(sets)){
hit.set <- which(names(hits)==sets[i])
tmp <- get(paste0("n.", sets[i]))
bin.venn[tmp,sets[-i]] <- hits[[hit.set]][,sets[-i]]
}
# e. Remove fully empty lines
#for(i in 1:length(sets)){
#  assign(paste0("empty.",sets[i]),which(bin.venn[,sets[i]]==0))
#}
#empty.full <- Reduce(intersect, list(empty.Host1,
#                                     empty.Host2,
#                                     empty.Host3,
#                                     empty.Tumour1,
#                                     empty.Tumour2,
#                                     empty.Tumour3))
# g. Retrieve Gene Name/ID
for (i in 1:length(hits)){
match.pos <- match(hits[[i]][,1],all.positions)
bin.venn[match.pos,c(length(hits)+2:3)] <- bin.stringent.only[match.pos,c(length(hits)+2:3)] <- hits[[i]][,c("Gene ID", "Gene Translation")]
}
summary.venn <- bin.venn
#bin.venn <- bin.venn[-empty.full,]
#bin.stringent.only <- bin.stringent.only[-empty.full,]
# g. Make a binary Table, based on Threshold and Duplicate-Hit Specification
if(type=="all"){
names <- colnames(summary.venn)
bin.venn <- cbind(summary.venn, rep(0, length(summary.venn[,1])))
colnames(bin.venn) <- c(names, "Germline")
germ <- vector(mode="list", length=3)
names(germ) <- c("Host1", "Host2", "Host3")
for (i in 1:length(names(germ))){
germ[[i]] <- which(as.integer(str_split_fixed(bin.venn[,c(1+i)],"/",2)[,1])>=threshold)
bin.venn[germ[[i]],"Germline"] <- 1
}
bin.venn <- bin.venn[,-c(2:4)]
bin.venn <- bin.venn[,c(1,7,2:6)]
pdf(paste0("DFTD_Exon_Overlap_all.pdf"), width = 10, height = 8)
}else if (type=="cleared"){
names <- colnames(summary.venn)
bin.venn <- cbind(summary.venn, rep(0, length(summary.venn[,1])))
colnames(bin.venn) <- c(names, "Germline")
germ <- vector(mode="list", length=3)
names(germ) <- c("Host1", "Host2", "Host3")
for (i in 1:length(names(germ))){
germ[[i]] <- which(as.integer(str_split_fixed(bin.venn[,c(1+i)],"/",2)[,1])>=threshold)
bin.venn[germ[[i]],"Germline"] <- 1
}
## Take duplicated reads, remove them (also from the Summary)
multi.pos <- which(duplicated(str_split_fixed(bin.venn[,1], ";", 4)[,1])==T)
bin.venn <- bin.venn[-sort(c(multi.pos, multi.pos-1)),]           # here
bin.stringent.only <- bin.stringent.only[-sort(c(multi.pos, multi.pos-1)),]   # here
summary.venn <- summary.venn[-sort(c(multi.pos, multi.pos-1)),]   # here
bin.venn <- bin.venn[,-c(2:4)]
bin.venn <- bin.venn[,c(1,7,2:6)]
pdf(paste0("DFTD_Exon_Overlap_cleared.pdf"), width = 10, height = 8)
}else if (type=="unified"){
## Take duplicated reads, merge them (contigname change, calls from all; overwritten)
multi.pos <- which(duplicated(str_split_fixed(bin.venn[,1], ";", 4)[,1])==T)
multi.pos.contig <- str_split_fixed(bin.venn[sort(unique(c(multi.pos, multi.pos-1))),1], ";", 5)[,1:2]
bin.venn[sort(unique(c(multi.pos, multi.pos-1))),1] <- paste(multi.pos.contig[,1],multi.pos.contig[,2],sep=";")
multi.pos.names <- unique(bin.venn[multi.pos,1])
# For-loop: how many copies are there per Duplicate? - merge up these values
multi.pos.id <- vector(mode="list",length=length(multi.pos.names))
for (i in 1:length(multi.pos.names)){
multi.pos.id[[i]] <- grep(multi.pos.names[i], bin.venn[,1])
bin.venn[multi.pos.id[[i]][1],2] <- paste(sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],2],"/",2)[,1])),
sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],2],"/",2)[,2]), na.rm=T),
sep="/")
bin.venn[multi.pos.id[[i]][1],3] <- paste(sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],3],"/",2)[,1])),
sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],3],"/",2)[,2]), na.rm=T),
sep="/")
bin.venn[multi.pos.id[[i]][1],4] <- paste(sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],4],"/",2)[,1])),
sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],4],"/",2)[,2]), na.rm=T),
sep="/")
bin.venn[multi.pos.id[[i]][1],5] <- paste(sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],5],"/",2)[,1])),
sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],5],"/",2)[,2]), na.rm=T),
sep="/")
bin.venn[multi.pos.id[[i]][1],6] <- paste(sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],6],"/",2)[,1])),
sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],6],"/",2)[,2]), na.rm=T),
sep="/")
bin.venn[multi.pos.id[[i]][1],7] <- paste(sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],7],"/",2)[,1])),
sum(as.integer(str_split_fixed(bin.venn[multi.pos.id[[i]],7],"/",2)[,2]), na.rm=T),
sep="/")
}
summary.venn <- bin.venn
# Mark as germline
names <- colnames(summary.venn)
bin.venn <- cbind(summary.venn, rep(0, length(summary.venn[,1])))
colnames(bin.venn) <- c(names, "Germline")
germ <- vector(mode="list", length=3)
names(germ) <- c("Host1", "Host2", "Host3")
for (i in 1:length(names(germ))){
germ[[i]] <- which(as.integer(str_split_fixed(bin.venn[,c(1+i)],"/",2)[,1])>=threshold)
bin.venn[germ[[i]],"Germline"] <- 1
}
# After merging, remove the duplicaes (also from the Summary)
bin.venn <- bin.venn[-multi.pos,]
bin.stringent.only <-bin.stringent.only[-multi.pos,]
summary.venn <- summary.venn[-multi.pos,]
bin.venn <- bin.venn[,-c(2:4)]
bin.venn <- bin.venn[,c(1,7,2:6)]
pdf(paste0("DFTD_Exon_Overlap_unified.pdf"), width = 10, height = 8)
}
## Binarise tumour data
bin.venn[which(as.integer(str_split_fixed(bin.venn[,"Tumour1"],"/",2)[,1])<=threshold),"Tumour1"] <- 0
bin.venn[which(as.integer(str_split_fixed(bin.venn[,"Tumour1"],"/",2)[,1])>threshold),"Tumour1"] <- 1
bin.venn[which(as.integer(str_split_fixed(bin.venn[,"Tumour2"],"/",2)[,1])<=threshold),"Tumour2"] <- 0
bin.venn[which(as.integer(str_split_fixed(bin.venn[,"Tumour2"],"/",2)[,1])>threshold),"Tumour2"] <- 1
bin.venn[which(as.integer(str_split_fixed(bin.venn[,"Tumour3"],"/",2)[,1])<=threshold),"Tumour3"] <- 0
bin.venn[which(as.integer(str_split_fixed(bin.venn[,"Tumour3"],"/",2)[,1])>threshold),"Tumour3"] <- 1
# h. Calculate the overlap areas
n1 <- hit.Tumour2 <- which(bin.venn[,"Tumour2"]==1) # n1
n2 <- hit.germ <- which(bin.venn[,"Germline"]==1) # n2
n3 <- hit.Tumour3 <- which(bin.venn[,"Tumour3"]==1) # n3
n4 <- hit.Tumour1 <- which(bin.venn[,"Tumour1"]==1) # n4
n12 <- intersect(n1,n2)
n13 <- intersect(n1,n3)
n14 <- intersect(n1,n4)
n23 <- intersect(n2,n3)
n24 <- intersect(n2,n4)
n34 <- intersect(n3,n4)
n123 <- intersect(intersect(n1,n2),n3)
n124 <- intersect(intersect(n1,n2),n4)
n134 <- intersect(intersect(n1,n3),n4)
n234 <- intersect(intersect(n2,n3),n4)
n1234 <- Reduce(intersect, list(n1,n2,n3,n4))
# Amounts
hit.Tumour2.n <- length(n1)
hit.germ.n <- length(n2)
hit.Tumour3.n <- length(n3)
hit.Tumour1.n <- length(n4)
n12.n <- length(n12)
n13.n <- length(n13)
n14.n <- length(n14)
n23.n <- length(n23)
n24.n <- length(n24)
n34.n <- length(n34)
n123.n <- length(n123)
n124.n <- length(n124)
n134.n <- length(n134)
n234.n <- length(n234)
n1234.n <- length(n1234)
# i. Draw Venn
draw.quad.venn(area1 = hit.Tumour2.n,
area2 = hit.germ.n,
area3 = hit.Tumour3.n,
area4 = hit.Tumour1.n,
n12 = n12.n,
n13 = n13.n,
n14 = n14.n,
n23 = n23.n,
n24 = n24.n,
n34 = n34.n,
n123 = n123.n,
n124 = n124.n,
n134 = n134.n,
n234 = n234.n,
n1234 = n1234.n,
category = c("Tumour 2", "Germline", "Tumour 3", "Tumour 1"),
lwd = c(4,4,4,2),
lty = c(3,3,3,1),
col = rep("black", 4),
fill = c(rgb(1,0,0,0.5), rgb(0,0,1,0.7), rgb(1,0,0,0.5), rgb(1,0,0,0.5)),
alpha = c(0.7,0.7,0.7,0.7),
cat.cex = rep(1.8,4),
cat.fontfamily = rep("serif", 4),
cex = rep(1.5,15),
fontfamily = rep("serif", 15),
ind=T)
dev.off()
# j. Hierarchical Clustering
require(cluster)
## On Binary Exon Indel Tables
colnames(bin.venn)[3:5] <- c("Tumour 1", "Tumour 2", "Tumour 3")
cluster.n <- as.matrix(bin.venn[,2:5])
class(cluster.n) <- "numeric"
cluster.samples <- agnes(t(cluster.n))
heat.cols <- colorRampPalette(c("azure", "darkgreen"))(n = 2)
pdf(paste0("DFTD_Hierarchical_Clustering.pdf"), width=10, height=7)
plot(cluster.samples, main = "DFTD-Clustering by Sample",
xlab = "Samples", which.plots=2)
options(warn=-1)
heatmap(t(cluster.n), Colv=F, Rowv=F, cexCol=0.01, scale='none',
xlab="Indels", ylab="Samples", col=heat.cols, na.rm=T,
cexRow = 1)
options(warn=0)
dev.off()
# k. Final Sets
n1 <- hit.Tumour2 <- which(bin.venn[,"Tumour 2"]==1) # n1
n2 <- hit.germ <- which(bin.venn[,"Germline"]==1) # n2
n3 <- hit.Tumour3 <- which(bin.venn[,"Tumour 3"]==1) # n3
n4 <- hit.Tumour1 <- which(bin.venn[,"Tumour 1"]==1) # n4
# Tumour 1
unique.Tumour1 <- hit.Tumour1[which(!(hit.Tumour1 %in% Reduce(union, list(hit.Tumour2,hit.Tumour3,hit.germ)))==T)]
som.shared.all <- Reduce(intersect, list(hit.Tumour1,hit.Tumour2,hit.Tumour3))
som.shared.all <- som.shared.all[-which(bin.venn[som.shared.all,"Germline"]==1)]
som.shared.Tumour1.Tumour2 <- intersect(hit.Tumour1,hit.Tumour2)
som.shared.Tumour1.Tumour2 <- som.shared.Tumour1.Tumour2[-which((som.shared.Tumour1.Tumour2 %in% Reduce(union, list(hit.Tumour3, hit.germ)))==T)]
som.shared.Tumour1.Tumour3 <- intersect(hit.Tumour1,hit.Tumour3)
som.shared.Tumour1.Tumour3 <- som.shared.Tumour1.Tumour3[-which((som.shared.Tumour1.Tumour3 %in% Reduce(union, list(hit.Tumour2, hit.germ)))==T)]
# Tumour2
unique.Tumour2 <- hit.Tumour2[which(!(hit.Tumour2 %in% Reduce(union, list(hit.Tumour1,hit.Tumour3,hit.germ)))==T)]
som.shared.Tumour2.Tumour3 <- intersect(hit.Tumour2,hit.Tumour3)
som.shared.Tumour2.Tumour3 <- som.shared.Tumour2.Tumour3[-which((som.shared.Tumour2.Tumour3 %in% Reduce(union, list(hit.Tumour1, hit.germ)))==T)]
# Tumour3
unique.Tumour3 <- hit.Tumour3[which(!(hit.Tumour3 %in% Reduce(union, list(hit.Tumour1,hit.Tumour2,hit.germ)))==T)]
# Germline
germ.all <- which(bin.venn[,"Germline"]==1)
# Add Set Index to Binary-Table and Summary
names <- colnames(bin.venn)
bin.venn <- cbind(bin.venn,rep(NA,length(bin.venn[,1])))
colnames(bin.venn) <- c(names, "Type")
bin.venn[unique.Tumour1,"Type"] <- "Unique Tumour1"
bin.venn[unique.Tumour2,"Type"] <- "Unique Tumour2"
bin.venn[unique.Tumour3,"Type"] <- "Unique Tumour3"
bin.venn[germ.all,"Type"] <- "Germline"
bin.venn[som.shared.all,"Type"] <- "Shared Som."
bin.venn[som.shared.Tumour1.Tumour2,"Type"] <- "Shared Tumour1-Tumour2"
bin.venn[som.shared.Tumour1.Tumour3,"Type"] <- "Shared Tumour1-Tumour3"
bin.venn[som.shared.Tumour2.Tumour3,"Type"] <- "Shared Tumour2-Tumour3"
bin.stringent.only <- bin.stringent.only[-which(is.na(bin.venn[,"Type"])==T),]
bin.venn <- bin.venn[-which(is.na(bin.venn[,"Type"])==T),]
# Add Set Index to Summary
names <- colnames(summary.venn)
summary.venn <- cbind(summary.venn,rep(NA,length(summary.venn[,1])))
colnames(summary.venn) <- c(names, "Type")
summary.venn[unique.Tumour1,"Type"] <- "Unique Tumour1"
summary.venn[unique.Tumour2,"Type"] <- "Unique Tumour2"
summary.venn[unique.Tumour3,"Type"] <- "Unique Tumour3"
summary.venn[germ.all,"Type"] <- "Germline"
summary.venn[som.shared.all,"Type"] <- "Shared Som."
summary.venn[som.shared.Tumour1.Tumour2,"Type"] <- "Shared Tumour1-Tumour2"
summary.venn[som.shared.Tumour1.Tumour3,"Type"] <- "Shared Tumour1-Tumour3"
summary.venn[som.shared.Tumour2.Tumour3,"Type"] <- "Shared Tumour2-Tumour3"
# l. Check the Calls vs. COSMIC database of Cancer Drivers
genes <- unique(sort(c(summary.venn[which(summary.venn[,"Type"]=="Shared Som."),"Gene Translation"],
summary.venn[which(summary.venn[,"Type"]=="Shared Tumour1-Tumour2"),"Gene Translation"],
summary.venn[which(summary.venn[,"Type"]=="Shared Tumour1-Tumour3"),"Gene Translation"],
summary.venn[which(summary.venn[,"Type"]=="Shared Tumour2-Tumour3"),"Gene Translation"],
summary.venn[which(summary.venn[,"Type"]=="unique.Tumour1"),"Gene Translation"],
summary.venn[which(summary.venn[,"Type"]=="unique.Tumour2"),"Gene Translation"],
summary.venn[which(summary.venn[,"Type"]=="unique.Tumour3"),"Gene Translation"])))
cosmic.check <- c()
cosmic.check <- sapply(genes, function(x) which(cosmic.genes[,"Gene.Symbol"]==x))
cosmic.pos <- sapply(cosmic.check, function(x) length(x))
cat("\n COSMIC Driver Gene Hits: ", names(which(cosmic.pos!=0)))
cosmic.lines <- c()
for (i in 1:length(which(cosmic.pos!=0))){
cosmic.lines <- c(cosmic.lines, as.integer(unlist(cosmic.check[which(cosmic.pos!=0)][i])))
}
cosmic.genes <- cosmic.genes[cosmic.lines,]
cosmic.names <- names(which(cosmic.pos!=0))
# Set path
setwd(main.path)
}
cross.DFTD.venn(hits = cross.transcripts,
threshold = 4,
type = "all",
titulo = "DFTD - Overlap (all unique Indels)")
View(cross.transcripts$'Host1')
View(cross.transcripts$'Tumour1')
rm(list=ls())
# Install and Load Packages
library(VennDiagram)
library(gridExtra)
library(stringr)
library(data.table)
library(GenomicRanges)
# Source Functions and Helper Files (~ 5 seconds)
source("1_Indelwald_functions.R")
# Load the Toy Dataset
# 1 Tumour-VCF of Platypus & Pindel, for Devil Chromosome 5 (Example)
# 1 Host-VCF of Platypus & Pindel, for Devil Chromosome 5
load(paste0(main.path,"/Toy/Toy1_Stringent.Rdata"))
raw.calls(pindel.vcf = host.pindel,
platypus.vcf = host.platypus,
chromosome = "5",
sample = "Host_#1")
raw.sizes(pindel.vcf = host.pindel,
platypus.vcf = host.platypus,
chromosome = "5",
sample = "Host_#1")
tumour.1 <- vector(mode="list", length=5)
names(tumour.1) <- c("overlap", "pindel-Q",
"platypus-Q", "summary", "in-transcript")
## Take Platypus/Pindel-Intersection
tumour.1[[1]] <- overlap.vcfs(pindel.vcf = host.pindel,
platypus.vcf = host.platypus)
# Apply a Pindel-Quality Filter (default Threshold: 200)
tumour.1[[2]] <- pindel.filter(overlap = tumour.1$'overlap',
threshold = 200)
# Apply a Platypus-Quality Filter
tumour.1[[3]] <- platypus.filter(overlap = tumour.1$'pindel-Q',
threshold = 200)
# Summarise: Match Contig-Positions to Chromosomal Positions
tumour.1[[4]] <- indel.summary(contigs.coordinates = contig.lengths,
pindel.vcf = tumour.1$'platypus-Q'[[1]],
platypus.vcf = tumour.1$'platypus-Q'[[2]])
# Have a look at the Summary-Table: Indel Positions, Types, BAFs
View(tumour.1$'summary')
indel.density(hits = tumour.1$'summary',
contigs.coordinates = contig.lengths,
genes = devil.genes,
chromosome = "5",
sample = "Host_#1")
rainfall(hits = tumour.1$'summary',
contigs.coordinates = contig.lengths,
chromosome = "5",
sample = "Host_#1",
split = "Y")
# Rainfall Plot with Size-Type Specifications
rainfall.types(hits = tumour.1$'summary',
chromosome = "5",
sample = "Host_#1")
indel.baf(hits = tumour.1$'summary',
contigs.coordinates = contig.lengths,
chromosome = "5",
sample = "Host_#1",
pindel = "N")
tumour.1[[5]] <- transcript.hits(hits = tumour.1$'summary',
chromosome = "5")
tumour.1[[5]] <- hits.translate(hits = tumour.1$'in-transcript')
View(tumour.1$'in-transcript'[,c(12,14,1,3:7)])
final.results.plots(pindel.vcf = tumour.pindel,
platypus.vcf = tumour.platypus,
summary.list = tumour.1,
chromosome = "5",
sample = "Host_#1")
rm(list=ls())
############ INDELWALD - HYBRID INDEL CALLING ##############
####################### Version 1.0 ########################
## STRINGENT FILTERING
## Last Update - 14/08/2015 ##
## mrs72 / Maximilian Stammnitz ##
## 1. Setting Up Work-Environment ##
## ## ## ## ## ## ## ## ## ## ## ###
# Install and Load Packages
library(VennDiagram)
library(gridExtra)
library(stringr)
library(data.table)
library(GenomicRanges)
# Source Functions and Helper Files (~ 5 seconds)
source("1_Indelwald_functions.R")
# Load the Toy Dataset
# 1 Tumour-VCF of Platypus & Pindel, for Devil Chromosome 5 (Example)
# 1 Host-VCF of Platypus & Pindel, for Devil Chromosome 5
load(paste0(main.path,"/Toy/Toy1_Stringent.Rdata"))
## 2. Checking Caller's Raw Output  ##
## ## ## ## ## ## ## ## ## ## ## ## ##
## Venn Overlap between Pindel and Platypus (~ 5 seconds)
raw.calls(pindel.vcf = tumour.pindel,
platypus.vcf = tumour.platypus,
chromosome = "5",
sample = "Tumour_#1")
## Size Spectrum of Pindel and Platypus
raw.sizes(pindel.vcf = tumour.pindel,
platypus.vcf = tumour.platypus,
chromosome = "5",
sample = "Tumour_#1")
## 3. Stringent Filtering  ##
## ## ## ## ## ## ## ## ## ##
tumour.1 <- vector(mode="list", length=5)
names(tumour.1) <- c("overlap", "pindel-Q",
"platypus-Q", "summary", "in-transcript")
## Take Platypus/Pindel-Intersection
tumour.1[[1]] <- overlap.vcfs(pindel.vcf = tumour.pindel,
platypus.vcf = tumour.platypus)
# Apply a Pindel-Quality Filter (default Threshold: 200)
tumour.1[[2]] <- pindel.filter(overlap = tumour.1$'overlap',
threshold = 200)
# Apply a Platypus-Quality Filter
tumour.1[[3]] <- platypus.filter(overlap = tumour.1$'pindel-Q',
threshold = 200)
# Summarise: Match Contig-Positions to Chromosomal Positions
tumour.1[[4]] <- indel.summary(contigs.coordinates = contig.lengths,
pindel.vcf = tumour.1$'platypus-Q'[[1]],
platypus.vcf = tumour.1$'platypus-Q'[[2]])
# Have a look at the Summary-Table: Indel Positions, Types, BAFs
View(tumour.1$'summary')
## 4. Visualising Indels   ##
## ## ## ## ## ## ## ## ## ##
# Indel-Density Plot on Chromosome
indel.density(hits = tumour.1$'summary',
contigs.coordinates = contig.lengths,
genes = devil.genes,
chromosome = "5",
sample = "Tumour_#1")
# Rainfall Plot
rainfall(hits = tumour.1$'summary',
contigs.coordinates = contig.lengths,
chromosome = "5",
sample = "Tumour_#1",
split = "Y")
# Rainfall Plot with Size-Type Specifications
rainfall.types(hits = tumour.1$'summary',
chromosome = "5",
sample = "Tumour_#1")
# Indel BAF Plot (default: with Platypus Calls only)
# Pindel BAFs are - due to the algorithm's read retrieval - constrained to lower BAF ratios.
# However, they can be visualised by flagging pindel="Y"
indel.baf(hits = tumour.1$'summary',
contigs.coordinates = contig.lengths,
chromosome = "5",
sample = "Tumour_#1",
pindel = "N")
## 5. Transcript Filtering  ##
## ## ## ## ## ## ## ## ## ###
# Which Indels are found in ENSEMBL-Transcriptlist?
tumour.1[[5]] <- transcript.hits(hits = tumour.1$'summary',
chromosome = "5")
# Translate Transcripts/Genes to HGNC
tumour.1[[5]] <- hits.translate(hits = tumour.1$'in-transcript')
# Visualise these hits with one command
View(tumour.1$'in-transcript'[,c(12,14,1,3:7)])
## 6. Collect Stats  ##
## ## ## ## ## ## ## ##
final.results.plots(pindel.vcf = tumour.pindel,
platypus.vcf = tumour.platypus,
summary.list = tumour.1,
chromosome = "5",
sample = "Tumour_#1")
rm(list=ls())
library(VennDiagram)
library(gridExtra)
library(stringr)
library(data.table)
library(GenomicRanges)
source("1_Indelwald_functions.R")
